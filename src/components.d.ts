/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import '@ionic/core';


declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  AppBody as AppBody
} from './components/app/app-body/app-body';

declare global {
  interface HTMLAppBodyElement extends AppBody, HTMLStencilElement {
  }
  var HTMLAppBodyElement: {
    prototype: HTMLAppBodyElement;
    new (): HTMLAppBodyElement;
  };
  interface HTMLElementTagNameMap {
    "app-body": HTMLAppBodyElement;
  }
  interface ElementTagNameMap {
    "app-body": HTMLAppBodyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-body": JSXElements.AppBodyAttributes;
    }
  }
  namespace JSXElements {
    export interface AppBodyAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsA as ImportsA
} from './tests/imports/imports-a/imports-a';

declare global {
  interface HTMLImportsAElement extends ImportsA, HTMLStencilElement {
  }
  var HTMLImportsAElement: {
    prototype: HTMLImportsAElement;
    new (): HTMLImportsAElement;
  };
  interface HTMLElementTagNameMap {
    "imports-a": HTMLImportsAElement;
  }
  interface ElementTagNameMap {
    "imports-a": HTMLImportsAElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-a": JSXElements.ImportsAAttributes;
    }
  }
  namespace JSXElements {
    export interface ImportsAAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsB as ImportsB
} from './tests/imports/imports-b/imports-b';

declare global {
  interface HTMLImportsBElement extends ImportsB, HTMLStencilElement {
  }
  var HTMLImportsBElement: {
    prototype: HTMLImportsBElement;
    new (): HTMLImportsBElement;
  };
  interface HTMLElementTagNameMap {
    "imports-b": HTMLImportsBElement;
  }
  interface ElementTagNameMap {
    "imports-b": HTMLImportsBElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-b": JSXElements.ImportsBAttributes;
    }
  }
  namespace JSXElements {
    export interface ImportsBAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsC as ImportsC
} from './tests/imports/imports-c/imports-c';

declare global {
  interface HTMLImportsCElement extends ImportsC, HTMLStencilElement {
  }
  var HTMLImportsCElement: {
    prototype: HTMLImportsCElement;
    new (): HTMLImportsCElement;
  };
  interface HTMLElementTagNameMap {
    "imports-c": HTMLImportsCElement;
  }
  interface ElementTagNameMap {
    "imports-c": HTMLImportsCElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-c": JSXElements.ImportsCAttributes;
    }
  }
  namespace JSXElements {
    export interface ImportsCAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsCircular as ImportsCircular
} from './tests/imports/imports-circular/imports-circular';

declare global {
  interface HTMLImportsCircularElement extends ImportsCircular, HTMLStencilElement {
  }
  var HTMLImportsCircularElement: {
    prototype: HTMLImportsCircularElement;
    new (): HTMLImportsCircularElement;
  };
  interface HTMLElementTagNameMap {
    "imports-circular": HTMLImportsCircularElement;
  }
  interface ElementTagNameMap {
    "imports-circular": HTMLImportsCircularElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-circular": JSXElements.ImportsCircularAttributes;
    }
  }
  namespace JSXElements {
    export interface ImportsCircularAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsIndex as ImportsIndex
} from './tests/imports/imports-index/imports-index';

declare global {
  interface HTMLImportsIndexElement extends ImportsIndex, HTMLStencilElement {
  }
  var HTMLImportsIndexElement: {
    prototype: HTMLImportsIndexElement;
    new (): HTMLImportsIndexElement;
  };
  interface HTMLElementTagNameMap {
    "imports-index": HTMLImportsIndexElement;
  }
  interface ElementTagNameMap {
    "imports-index": HTMLImportsIndexElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-index": JSXElements.ImportsIndexAttributes;
    }
  }
  namespace JSXElements {
    export interface ImportsIndexAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ImportsIndex2 as ImportsIndex2
} from './tests/imports/imports-index2/imports-index2';

declare global {
  interface HTMLImportsIndex2Element extends ImportsIndex2, HTMLStencilElement {
  }
  var HTMLImportsIndex2Element: {
    prototype: HTMLImportsIndex2Element;
    new (): HTMLImportsIndex2Element;
  };
  interface HTMLElementTagNameMap {
    "imports-index2": HTMLImportsIndex2Element;
  }
  interface ElementTagNameMap {
    "imports-index2": HTMLImportsIndex2Element;
  }
  namespace JSX {
    interface IntrinsicElements {
      "imports-index2": JSXElements.ImportsIndex2Attributes;
    }
  }
  namespace JSXElements {
    export interface ImportsIndex2Attributes extends HTMLAttributes {
      
    }
  }
}


import {
  Comp10Prop as Comp10prop
} from './tests/quantity/comp-10prop/comp-10prop';

declare global {
  interface HTMLComp10propElement extends Comp10prop, HTMLStencilElement {
  }
  var HTMLComp10propElement: {
    prototype: HTMLComp10propElement;
    new (): HTMLComp10propElement;
  };
  interface HTMLElementTagNameMap {
    "comp-10prop": HTMLComp10propElement;
  }
  interface ElementTagNameMap {
    "comp-10prop": HTMLComp10propElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "comp-10prop": JSXElements.Comp10propAttributes;
    }
  }
  namespace JSXElements {
    export interface Comp10propAttributes extends HTMLAttributes {
      property1?: string;
      property10?: string;
      property2?: string;
      property3?: string;
      property4?: string;
      property5?: string;
      property6?: string;
      property7?: string;
      property8?: string;
      property9?: string;
    }
  }
}


import {
  Comp20Prop as Comp20prop
} from './tests/quantity/comp-20prop/comp-20prop';

declare global {
  interface HTMLComp20propElement extends Comp20prop, HTMLStencilElement {
  }
  var HTMLComp20propElement: {
    prototype: HTMLComp20propElement;
    new (): HTMLComp20propElement;
  };
  interface HTMLElementTagNameMap {
    "comp-20prop": HTMLComp20propElement;
  }
  interface ElementTagNameMap {
    "comp-20prop": HTMLComp20propElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "comp-20prop": JSXElements.Comp20propAttributes;
    }
  }
  namespace JSXElements {
    export interface Comp20propAttributes extends HTMLAttributes {
      property1?: string;
      property10?: string;
      property11?: string;
      property12?: string;
      property13?: string;
      property14?: string;
      property15?: string;
      property16?: string;
      property17?: string;
      property18?: string;
      property19?: string;
      property2?: string;
      property20?: string;
      property3?: string;
      property4?: string;
      property5?: string;
      property6?: string;
      property7?: string;
      property8?: string;
      property9?: string;
    }
  }
}


import {
  CompNoop as CompNoop
} from './tests/quantity/comp-noop/comp-noop';

declare global {
  interface HTMLCompNoopElement extends CompNoop, HTMLStencilElement {
  }
  var HTMLCompNoopElement: {
    prototype: HTMLCompNoopElement;
    new (): HTMLCompNoopElement;
  };
  interface HTMLElementTagNameMap {
    "comp-noop": HTMLCompNoopElement;
  }
  interface ElementTagNameMap {
    "comp-noop": HTMLCompNoopElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "comp-noop": JSXElements.CompNoopAttributes;
    }
  }
  namespace JSXElements {
    export interface CompNoopAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
